{"remainingRequest":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/src/views/curso/Tema3.vue?vue&type=template&id=71ca1e12&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/src/views/curso/Tema3.vue","mtime":1740331931422},{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Responsabilidad_Social_Empresarial/U2_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}